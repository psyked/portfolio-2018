{"version":3,"sources":["webpack:///path---blog-playing-with-air-59eda2967ceb0fa49f8d.js","webpack:///./.cache/json/blog-playing-with-air.json"],"names":["webpackJsonp","1344","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","tags","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,eAAAC,OAAA,eAA8CC,gBAAmBC,GAAA,kHAAAC,KAAA,w9CAAAC,aAAqmDL,MAAA,sBAAAM,KAAA,iBAAAC,MAAA,oCAAiGC","file":"path---blog-playing-with-air-59eda2967ceb0fa49f8d.js","sourcesContent":["webpackJsonp([208793417680164],{\n\n/***/ 1344:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Psyked.co.uk\",\"author\":\"James Ford\"}},\"markdownRemark\":{\"id\":\"/Users/James/Repositories/portfolio-2018/src/posts/playing-with-air/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>I thought i'd do a little bit of serious work with Air - how about an application for converting text file formats? Well ok, it sounds boring, but it's a starting point. I'm not finished yet, but my deadline is pretty harsh (Wednesday, in fact!) so I'm hoping to have another update tomorrow, once I've ironed out a few remaining bugs (and removed the chance that the application will corrupt your files!)</p>\\n<p><img src=\\\"http://uploads.psyked.co.uk/2008/04/adobeairpost.jpg\\\" alt=\\\"adobeairpost.jpg\\\"></p>\\n<h2>What is it?</h2>\\n<p>This Air app. should take an ANSI or other unusually formatted text file, and save it out as UTF-8.</p>\\n<h2>Why?</h2>\\n<p>The need for this app. is pretty simple, really. If you make a Macro - don't shudder - to export MS Office content to text files (like, xml files) you can't specify the encoding of the outputted files. Although the content makes it out, it's encoded in (usually) Windows-1252 format (aka ANSI). When Flash - or many other XML-reading products, like Internet Explorer or Firefox - import the XML file, and come across incorrectly encoded characters, they tend to crash and burn. If the file is properly saved as UTF-8 however, everyone plays nicely. Now this can be done by opening the file in notepad and changing the encoding type, but that wouldn't be so fun, would it?</p>\\n<h2>When can I try it?</h2>\\n<p>A safe, stable version should be available aroundabout the 9th April. (Conventiently just after the Adobe On Air tour)</p>\",\"frontmatter\":{\"title\":\"Playing with Air...\",\"date\":\"April 07, 2008\",\"tags\":[\"air-applications\",\"ansi\",\"xml\"]}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-playing-with-air-59eda2967ceb0fa49f8d.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Psyked.co.uk\",\"author\":\"James Ford\"}},\"markdownRemark\":{\"id\":\"/Users/James/Repositories/portfolio-2018/src/posts/playing-with-air/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>I thought i'd do a little bit of serious work with Air - how about an application for converting text file formats? Well ok, it sounds boring, but it's a starting point. I'm not finished yet, but my deadline is pretty harsh (Wednesday, in fact!) so I'm hoping to have another update tomorrow, once I've ironed out a few remaining bugs (and removed the chance that the application will corrupt your files!)</p>\\n<p><img src=\\\"http://uploads.psyked.co.uk/2008/04/adobeairpost.jpg\\\" alt=\\\"adobeairpost.jpg\\\"></p>\\n<h2>What is it?</h2>\\n<p>This Air app. should take an ANSI or other unusually formatted text file, and save it out as UTF-8.</p>\\n<h2>Why?</h2>\\n<p>The need for this app. is pretty simple, really. If you make a Macro - don't shudder - to export MS Office content to text files (like, xml files) you can't specify the encoding of the outputted files. Although the content makes it out, it's encoded in (usually) Windows-1252 format (aka ANSI). When Flash - or many other XML-reading products, like Internet Explorer or Firefox - import the XML file, and come across incorrectly encoded characters, they tend to crash and burn. If the file is properly saved as UTF-8 however, everyone plays nicely. Now this can be done by opening the file in notepad and changing the encoding type, but that wouldn't be so fun, would it?</p>\\n<h2>When can I try it?</h2>\\n<p>A safe, stable version should be available aroundabout the 9th April. (Conventiently just after the Adobe On Air tour)</p>\",\"frontmatter\":{\"title\":\"Playing with Air...\",\"date\":\"April 07, 2008\",\"tags\":[\"air-applications\",\"ansi\",\"xml\"]}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-playing-with-air.json\n// module id = 1344\n// module chunks = 208793417680164"],"sourceRoot":""}