{"version":3,"sources":["webpack:///./src/pages/blog.jsx"],"names":["currentYear","Date","getFullYear","Blog","render","this","props","data","edges","allMarkdownRemark","site","siteMetadata","siteTitle","title","siteDescription","description","image","groupedPosts","map","node","reduce","prev","curr","arr","year","frontmatter","date","posts","push","htmlAttributes","lang","name","content","imageCredit","href","className","filter","edge","key","id","to","path","Object","keys","parseInt","sort","a","b","post","Component","pageQuery"],"mappings":"2RAQA,IAAMA,GAAc,IAAIC,MAAOC,cAEzBC,E,gLACJC,OAAA,WAAU,IAAD,EASHC,KAAKC,MAPPC,KACuBC,EAHlB,EAGHC,kBAAqBD,MAHlB,IAIHE,KACEC,aAAuBC,EALtB,EAKeC,MAA+BC,EAL9C,EAKiCC,YAEpCC,EAPG,EAOHA,MAIEC,EAAeT,EAClBU,KAAI,qBAAGC,QACPC,QAAO,SAACC,EAAMC,EAAMC,GACnB,IAAMC,EAAO,IAAIvB,KAAKqB,EAAKG,YAAYC,MAAMxB,cAQ7C,OAPKmB,EAAKG,KACRH,EAAKG,GAAQ,CACXA,OACAG,MAAO,KAGXN,EAAKG,GAAMG,MAAMC,KAAKN,GACfD,IACN,IAEL,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEQ,eAAgB,CACdC,KAAM,OAGR,+BAAQlB,GACR,0BAAMmB,KAAK,cAAcC,QAASlB,KAGpC,kBAAC,IAAD,CACED,MAAM,aACNG,MAAOA,EACPiB,YACE,8BACE,uBAAGC,KAAK,yGAAR,gBAEK,IAHP,KAIK,IACH,uBAAGA,KAAK,8FAAR,eAMN,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,eACb,0CAAgBnC,GAChB,4BACGQ,EACE4B,QAAO,SAAAC,GAAI,QAAMA,EAAKlB,KAAKM,YAAYC,QACvCU,QACC,SAAAC,GAAI,OACF,IAAIpC,KAAKoC,EAAKlB,KAAKM,YAAYC,MAC/B,IAAIzB,KAAKD,EAAc,aAE1BkB,KAAI,SAAAmB,GACH,OACE,wBAAIC,IAAKD,EAAKlB,KAAKoB,IACjB,kBAAC,IAAD,CAAMC,GAAIH,EAAKlB,KAAKM,YAAYgB,MAC7BJ,EAAKlB,KAAKM,YAAYZ,MADzB,KAEGwB,EAAKlB,KAAKM,YAAYC,KAFzB,WASZ,6BACA,yBAAKS,UAAU,eACb,4BAAQA,UAAU,SAChB,kDAGF,2BAAOA,UAAU,OACf,4YAWDO,OAAOC,KAAK1B,GACVmB,QAAO,SAAAE,GAAG,OAAIM,SAASN,EAAK,IAAMtC,KAClC6C,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAID,KACnB5B,KAAI,SAAAoB,GAAQ,IAAD,EACcrB,EAAaqB,GAA7Bd,EADE,EACFA,KAAMG,EADJ,EACIA,MACd,OACE,6BAASW,IAAKd,GACZ,0CAAgBA,GAChB,wBAAIc,IAAKd,GACNG,EACES,QAAO,SAAAY,GAAI,QAAMA,EAAKvB,YAAYC,QAClCU,QACC,SAAAY,GAAI,OACF,IAAI/C,KAAK+C,EAAKvB,YAAYC,MAC1B,IAAIzB,KAAKD,EAAc,aAE1BkB,KAAI,SAAA8B,GACH,OACE,wBAAIV,IAAKU,EAAKT,IACZ,kBAAC,IAAD,CAAMC,GAAIQ,EAAKvB,YAAYgB,MACxBO,EAAKvB,YAAYZ,MADpB,KAEGmC,EAAKvB,YAAYC,KAFpB,cAWlB,wBAAIS,UAAU,iB,GA5HTc,aAqIJ9C,YAER,IAAM+C,EAAS","file":"component---src-pages-blog-jsx-f1477ad83b379153fcea.js","sourcesContent":["import React, { Component } from 'react'\nimport Link from 'gatsby-link'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/Layout'\nimport Banner from '../components/Banner'\n\nconst currentYear = new Date().getFullYear()\n\nclass Blog extends Component {\n  render() {\n    const {\n      data: {\n        allMarkdownRemark: { edges },\n        site: {\n          siteMetadata: { title: siteTitle, description: siteDescription },\n        },\n        image,\n      },\n    } = this.props\n\n    const groupedPosts = edges\n      .map(({ node }) => node)\n      .reduce((prev, curr, arr) => {\n        const year = new Date(curr.frontmatter.date).getFullYear()\n        if (!prev[year]) {\n          prev[year] = {\n            year,\n            posts: [],\n          }\n        }\n        prev[year].posts.push(curr)\n        return prev\n      }, {})\n\n    return (\n      <Layout>\n        <Helmet\n          htmlAttributes={{\n            lang: 'en',\n          }}\n        >\n          <title>{siteTitle}</title>\n          <meta name=\"description\" content={siteDescription} />\n        </Helmet>\n\n        <Banner\n          title=\"Blog Posts\"\n          image={image}\n          imageCredit={\n            <span>\n              <a href=\"https://unsplash.com/@yingchih_hao?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">\n                Yingchih Hao\n              </a>{' '}\n              on{' '}\n              <a href=\"/search/photos/keyboard?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">\n                Unsplash\n              </a>\n            </span>\n          }\n        />\n        <div className=\"bodyContainer\">\n          <div className=\"inner\">\n            <div className=\"bodyContent\">\n              <h3>Posts from {currentYear}</h3>\n              <ul>\n                {edges\n                  .filter(edge => !!edge.node.frontmatter.date)\n                  .filter(\n                    edge =>\n                      new Date(edge.node.frontmatter.date) >\n                      new Date(currentYear + '-01-01')\n                  )\n                  .map(edge => {\n                    return (\n                      <li key={edge.node.id}>\n                        <Link to={edge.node.frontmatter.path}>\n                          {edge.node.frontmatter.title} (\n                          {edge.node.frontmatter.date})\n                        </Link>\n                      </li>\n                    )\n                  })}\n              </ul>\n            </div>\n            <hr />\n            <div className=\"bodyContent\">\n              <header className=\"major\">\n                <h2>Blog Post Archive</h2>\n              </header>\n\n              <aside className=\"box\">\n                <p>\n                  This is a curated collection of published articles written by\n                  myself. Some legacy blog posts that lack substantial unique\n                  content have been culled. Some articles are copies that were\n                  originally published elsewhere. Formatting may have changed\n                  and assets or external resources may have been adversely\n                  affected by the passage of time and the evolution of\n                  technology.\n                </p>\n              </aside>\n\n              {Object.keys(groupedPosts)\n                .filter(key => parseInt(key, 10) < currentYear)\n                .sort((a, b) => b - a)\n                .map(key => {\n                  const { year, posts } = groupedPosts[key]\n                  return (\n                    <section key={year}>\n                      <h3>Posts from {year}</h3>\n                      <ul key={year}>\n                        {posts\n                          .filter(post => !!post.frontmatter.date)\n                          .filter(\n                            post =>\n                              new Date(post.frontmatter.date) <\n                              new Date(currentYear + '-01-01')\n                          )\n                          .map(post => {\n                            return (\n                              <li key={post.id}>\n                                <Link to={post.frontmatter.path}>\n                                  {post.frontmatter.title} (\n                                  {post.frontmatter.date})\n                                </Link>\n                              </li>\n                            )\n                          })}\n                      </ul>\n                    </section>\n                  )\n                })}\n              <hr className=\"endPost\" />\n            </div>\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default Blog\n\nexport const pageQuery = graphql`\n  query BlogsQuery {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(\n      filter: { frontmatter: { layout: { eq: \"post\" } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, yyyy\")\n            path\n            title\n          }\n        }\n      }\n    }\n    image: file(relativePath: { eq: \"yingchih-hao-TZj-urJKRao-unsplash.jpg\" }) {\n      childImageSharp {\n        # Specify a fluid image and fragment\n        # The default maxWidth is 800 pixels\n        fluid {\n          ...GatsbyImageSharpFluid\n        }\n      }\n      colors {\n        ...GatsbyImageColors\n      }\n    }\n  }\n`\n"],"sourceRoot":""}