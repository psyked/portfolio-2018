webpackJsonp([0xbde5817e0524],{1246:function(t,e){t.exports={data:{site:{siteMetadata:{title:"Gatsby Starter - Forty by HTML5 UP",author:"Hunter Chang"}},markdownRemark:{id:"/Users/James/Repositories/portfolio-2018/src/posts/playing-with-air/index.md absPath of file >>> MarkdownRemark",html:"<p>I thought i'd do a little bit of serious work with Air - how about an application for converting text file formats?  Well ok, it sounds boring, but it's a starting point.  I'm not finished yet, but my deadline is pretty harsh (Wednesday, in fact!) so I'm hoping to have another update tomorrow, once I've ironed out a few remaining bugs (and removed the chance that the application will corrupt your files!)</p>\n<img src=\"http://uploads.psyked.co.uk/2008/04/adobeairpost.jpg\" alt=\"adobeairpost.jpg\">\n<h2>What is it?</h2>\nThis Air app. should take an ANSI or other unusually formatted text file, and save it out as UTF-8.\n<h2>Why?</h2>\nThe need for this app. is pretty simple, really.  If you make a Macro - don&apos;t shudder - to export MS Office content to text files (like, xml files) you can&apos;t specify the encoding of the outputted files. Although the content makes it out, it&apos;s encoded in (usually) Windows-1252 format (aka ANSI).  When Flash - or many other XML-reading products, like Internet Explorer or Firefox - import the XML file, and come across incorrectly encoded characters, they tend to crash and burn.  If the file is properly saved as UTF-8 however, everyone plays nicely.  Now this can be done by opening the file in notepad and changing the encoding type, but that wouldn&apos;t be so fun, would it?\n<h2>When can I try it?</h2>\nA safe, stable version should be available aroundabout the 9th April.  (Conventiently just after the Adobe On Air tour)",frontmatter:{title:"Playing with Air...",date:"April 07, 2008",tags:["air-applications","ansi","xml"]}}},pathContext:{}}}});
//# sourceMappingURL=path---blog-playing-with-air-cc98ce948eeb075e0283.js.map