@import './normalize';
@import './mixins'; 
@import './vars'; 

@import url('https://fonts.googleapis.com/css?family=Open+Sans|Roboto');

html {
  // @include fluid-type($min_width, $max_width, $min_font, $max_font);
  font-family: 'Roboto', sans-serif;
}

h1,h2,h3,h4,h5,h6 {
	font-family: 'Open Sans', sans-serif;
}

img {
	max-width: 100%;
}

body {
	margin: 0;
	padding: 0;
  background: #fcfcfd;
}

// ----
// libsass (v3.5.0.beta.2)
// ----

// =========================================================================
//
//  PRECISE CONTROL OVER RESPONSIVE TYPOGRAPHY FOR SASS
//  ---------------------------------------------------
//  Indrek Paas @indrekpaas
//
//  Inspired by Mike Riethmuller's Precise control over responsive typography
//  http://madebymike.com.au/writing/precise-control-responsive-typography/
//
//  Borrowed `strip-unit` function from Hugo Giraudel
//  https://css-tricks.com/snippets/sass/strip-unit-function/
//
//  02.04.2018 Remove `screen` keyword from media queries
//  11.08.2016 Remove redundant `&` self-reference
//  31.03.2016 Remove redundant parenthesis from output
//  02.10.2015 Add support for multiple properties
//  24.04.2015 Initial release
//
// =========================================================================

@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }

  @media (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

/* Single property */
html {
  @include fluid-type(font-size, 320px, 1366px, 16px, 18px);
  line-height: 1.5;
}

/* Multiple properties with same values */
h1 {
  @include fluid-type(font-size, 20em, 70em, 2em, 3em);
}

// h2 {
//   @include fluid-type(font-size, 20em, 70em, 2em, 3em);
// }

pre {
  overflow: scroll;
  background: $bg-alt;
  padding: $margin-sm;
  margin: #{$margin-lg} #{-$margin-sm};
}

.bodyContent {
  box-sizing: border-box;
  margin: 0 auto;
  max-width: 60em;
  @include poly-fluid-sizing('padding-left', (320px: 16px, 768px: 48px));
  @include poly-fluid-sizing('padding-right', (320px: 16px, 768px: 48px));
}

hr {
  @include fluid-type(margin-top, 20em, 70em, 2em, 4em);
  @include fluid-type(margin-bottom, 20em, 70em, 2em, 4em);
  background-image: linear-gradient(to right, $fg, $fg);
  border: 0;
  height: 1px;
  margin: 0 auto;
  max-width: 60em;
  // margin-bottom: 40px;
  // margin-top: 40px;
  overflow: visible;
  text-align: center;
  
  &:after {
    background: $bg;
    content: "• • •";
    display: inline-block;
    font: "BodoniXT" !important;
    font-size: 1.4em;
    padding: 0 0.4em;
    position: relative;
    top: -0.7em;
  }
}
