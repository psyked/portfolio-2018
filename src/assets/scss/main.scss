// html, 
// body, 
// .pattern-bg {
// 	background: repeating-linear-gradient(45deg, _palette(highlight), _palette(highlight) 10px, _palette(highlight-alt) 10px, _palette(highlight-alt) 20px);
// }

// .body {
// 	padding: 1em;
// }

// .tags {
// 	margin-top: 1em;

// 	a {
// 		background: _palette(bg-alt);
// 		padding: .25em .5em;
// 		margin: 0 0 0  .25em;
// 		color: _palette(fg);
// 	}
// }

@import './normalize';
@import './mixins'; 
@import './vars'; 

@import url('https://fonts.googleapis.com/css?family=Open+Sans|Roboto');

// $min_width: 320px;
// $max_width: 1200px;
// $min_font: 16px;
// $max_font: 24px;

html {
  // @include fluid-type($min_width, $max_width, $min_font, $max_font);
  font-family: 'Roboto', sans-serif;
}

h1,h2,h3,h4,h5,h6 {
	font-family: 'Open Sans', sans-serif;
}

img {
	max-width: 100%;
}

body {
	margin: 0;
	padding: 0;
	// padding: 1em;
	// background: repeating-linear-gradient(45deg,#00b0f0,#00b0f0 10px,#009dd6 0,#009dd6 20px);
}

.body {
	background: #fcfcfd;
}

.inner {
	// padding: 1em;
}

// $mod_1: 1.2; // mobile
// $mod_2: 1.5; // desktop

// h1 {  
// 	font-size: $mod_1*$mod_1*$mod_1*$mod_1 *1rem; 
//   @include fluid-type($min_width, $max_width, $mod_1*$mod_1*$mod_1 *$min_font, $mod_2*$mod_2*$mod_2 *$min_font);
// }
// h2 {  
//   font-size: $mod_1*$mod_1*$mod_1 *1rem; 
//   @include fluid-type($min_width, $max_width, $mod_1*$mod_1*$mod_1 *$min_font, $mod_2*$mod_2*$mod_2 *$min_font);
// }
// h3 { 
//   font-size: $mod_1*$mod_1 *1rem;
//   @include fluid-type($min_width, $max_width, $mod_1*$mod_1 *$min_font, $mod_2*$mod_2 *$min_font);
// }

// ----
// libsass (v3.5.0.beta.2)
// ----

// =========================================================================
//
//  PRECISE CONTROL OVER RESPONSIVE TYPOGRAPHY FOR SASS
//  ---------------------------------------------------
//  Indrek Paas @indrekpaas
//
//  Inspired by Mike Riethmuller's Precise control over responsive typography
//  http://madebymike.com.au/writing/precise-control-responsive-typography/
//
//  Borrowed `strip-unit` function from Hugo Giraudel
//  https://css-tricks.com/snippets/sass/strip-unit-function/
//
//  02.04.2018 Remove `screen` keyword from media queries
//  11.08.2016 Remove redundant `&` self-reference
//  31.03.2016 Remove redundant parenthesis from output
//  02.10.2015 Add support for multiple properties
//  24.04.2015 Initial release
//
// =========================================================================

@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }

  @media (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

/* Single property */
html {
  @include fluid-type(font-size, 320px, 1366px, 16px, 18px);
}

/* Multiple properties with same values */
h1 {
  @include fluid-type(padding-bottom padding-top, 20em, 70em, 2em, 6em);
  @include fluid-type(font-size, 20em, 70em, 2em, 3em);
}

pre {
  overflow: scroll;
  background: $bg-alt;
  padding: $margin-sm;
  margin: #{$margin-lg} #{-$margin-sm};
}