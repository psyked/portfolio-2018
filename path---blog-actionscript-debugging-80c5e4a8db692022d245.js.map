{"version":3,"sources":["webpack:///path---blog-actionscript-debugging-80c5e4a8db692022d245.js","webpack:///./.cache/json/blog-actionscript-debugging.json"],"names":["webpackJsonp","1188","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","tags","url","image","description","pathContext","prev","next","path"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,yCAAAC,OAAA,eAAwEC,gBAAmBC,GAAA,wHAAAC,KAAA,u5BAA4gCC,aAAgCL,MAAA,yBAAAM,KAAA,oBAAAC,MAAA,gBAAAC,IAAA,KAAAC,MAAA,KAAAC,YAAA,QAAiIC,aAAgBC,MAAA,EAAAC,MAAqBR,aAAeS,KAAA,mDAAAP,MAAA,sBAAAP,MAAA,8CAAAM,KAAA,2BAAAI,YAAA,KAAAD,MAAA","file":"path---blog-actionscript-debugging-80c5e4a8db692022d245.js","sourcesContent":["webpackJsonp([88515143727939],{\n\n/***/ 1188:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Psyked: James' Web Development website\",\"author\":\"James Ford\"}},\"markdownRemark\":{\"id\":\"/Users/James/Repositories/portfolio-2018/src/posts/actionscript-debugging/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>This is a simple little segment of code that i find very useful to work my way through flash files. It basically lists all the properties (which includes direct children) of the target movieclip. Here's a few implimentations...</p>\\n<p>(Set <code>n</code> beforehand with something like <code>var n = my_mc</code>)</p>\\n<pre><code>for(var i in n){\\ntrace(i+\\\" : \\\"+n[i]);\\n};\\n</code></pre>\\n<p>and thats it in a nutshell. Your output will be something like this;</p>\\n<pre><code>property : value\\n</code></pre>\\n<p>Ok, so thats not a very good example, but try it and you'll see.\\nHere's a function-based version for you...</p>\\n<pre><code>traceProperties = function(movieclip){\\nn = movieclip;\\nfor(i in n){\\ntrace(i+\\\" : \\\"+n[i]);\\n}\\n}\\n</code></pre>\\n<p>and it's Actionscript 2.0 sibling...</p>\\n<pre><code>function traceProperties(n:Object):Void{\\nfor(var i in n){\\ntrace(i+\\\" : \\\"+n[i]);\\n}\\n}\\n</code></pre>\",\"frontmatter\":{\"title\":\"ActionScript Debugging\",\"date\":\"February 28, 2007\",\"tags\":[\"actionscript\"],\"url\":null,\"image\":null,\"description\":null}}},\"pathContext\":{\"prev\":false,\"next\":{\"frontmatter\":{\"path\":\"/blog/flex-goes-open-source-what-does-this-mean/\",\"tags\":[\"flex\",\"open-source\"],\"title\":\"Flex goes Open-Source, what does this mean?\",\"date\":\"2007-04-26T19:35:11.000Z\",\"description\":null,\"image\":null}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-actionscript-debugging-80c5e4a8db692022d245.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Psyked: James' Web Development website\",\"author\":\"James Ford\"}},\"markdownRemark\":{\"id\":\"/Users/James/Repositories/portfolio-2018/src/posts/actionscript-debugging/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>This is a simple little segment of code that i find very useful to work my way through flash files. It basically lists all the properties (which includes direct children) of the target movieclip. Here's a few implimentations...</p>\\n<p>(Set <code>n</code> beforehand with something like <code>var n = my_mc</code>)</p>\\n<pre><code>for(var i in n){\\ntrace(i+\\\" : \\\"+n[i]);\\n};\\n</code></pre>\\n<p>and thats it in a nutshell. Your output will be something like this;</p>\\n<pre><code>property : value\\n</code></pre>\\n<p>Ok, so thats not a very good example, but try it and you'll see.\\nHere's a function-based version for you...</p>\\n<pre><code>traceProperties = function(movieclip){\\nn = movieclip;\\nfor(i in n){\\ntrace(i+\\\" : \\\"+n[i]);\\n}\\n}\\n</code></pre>\\n<p>and it's Actionscript 2.0 sibling...</p>\\n<pre><code>function traceProperties(n:Object):Void{\\nfor(var i in n){\\ntrace(i+\\\" : \\\"+n[i]);\\n}\\n}\\n</code></pre>\",\"frontmatter\":{\"title\":\"ActionScript Debugging\",\"date\":\"February 28, 2007\",\"tags\":[\"actionscript\"],\"url\":null,\"image\":null,\"description\":null}}},\"pathContext\":{\"prev\":false,\"next\":{\"frontmatter\":{\"path\":\"/blog/flex-goes-open-source-what-does-this-mean/\",\"tags\":[\"flex\",\"open-source\"],\"title\":\"Flex goes Open-Source, what does this mean?\",\"date\":\"2007-04-26T19:35:11.000Z\",\"description\":null,\"image\":null}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-actionscript-debugging.json\n// module id = 1188\n// module chunks = 88515143727939"],"sourceRoot":""}