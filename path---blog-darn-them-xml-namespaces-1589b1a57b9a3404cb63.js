webpackJsonp([51444621903814],{1093:function(e,a){e.exports={data:{site:{siteMetadata:{title:"Psyked: James' Web Development website",author:"James Ford"}},markdownRemark:{id:"/Users/James/Repositories/portfolio-2018/src/posts/darn-them-xml-namespaces/index.md absPath of file >>> MarkdownRemark",html:"<p>Ugh, this E4X stuff is all a bit new to me - I'm still not used to namespaces and stuff.  For some reason I've had trouble extracting data from XML when I'm using a namespace.  I have no idea why, but it seemed that with the namespace in use, my attempts at extracting data from the XML returned blank data.</p>\n<p>Never fear!  It seems that either removing the namespace or replacing it with a wildcard would let me access the data.  Kudos to the blog posts of Riley (Got RIA?) : <a href=\"http://brianmriley.wordpress.com/2008/03/14/remove-xml-namespaces-in-flex-or-as3/\">Remove Annoying XML Namespaces in Flex / AS3</a> and <a href=\"http://brianmriley.wordpress.com/2008/03/20/getting-around-unknown-namespaces-in-flex-and-as/\">Getting around unknown namespaces in Flex / AS3</a>.</p>\n<p>So until I get my head around how namespaces work, I'm going to be using the techniques described in the links above.  Until then, if anyone can explain this to me - I'd be very greatful!</p>",frontmatter:{title:"Darn them XML namespaces!",date:"December 01, 2008",tags:["actionscript","flex","e4x","namespaces","xml"],url:null,image:null,description:null}}},pathContext:{prev:{frontmatter:{path:"/blog/interesting-things-in-adobe-labs-adobe-wave/",tags:["adobe-wave","air"],title:"Interesting things in Adobe Labs - Adobe Wave",date:"2008-11-27T08:48:59.000Z"}},next:{frontmatter:{path:"/blog/application-information-class-for-air/",tags:["actionscript","air","applicationinfo"],title:"Application Information Class for AIR",date:"2008-12-01T08:45:29.000Z"}}}}}});
//# sourceMappingURL=path---blog-darn-them-xml-namespaces-1589b1a57b9a3404cb63.js.map