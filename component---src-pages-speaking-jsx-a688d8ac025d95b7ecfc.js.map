{"version":3,"sources":["webpack:///./src/components/SpeakingBanner.js","webpack:///./src/pages/speaking.jsx","webpack:///./node_modules/core-js/modules/es6.string.link.js"],"names":["props","image","Banner","Section","styled","section","SectionContent","div","Title","h3","ImageContainer","Speaking","render","this","data","presentations","allMarkdownRemark","edges","site","siteMetadata","siteTitle","title","siteDescription","description","Layout","htmlAttributes","lang","name","content","imageCredit","href","className","map","index","node","frontmatter","presentedAt","tags","html","colors","vibrant","hasImage","childImageSharp","dangerouslySetInnerHTML","__html","date","link","recording","key","format","Date","i","to","toLowerCase","Component","pageQuery","createHTML","url"],"mappings":"wRAKe,WAAAA,GAAU,IACfC,EADc,OACdA,MAgBR,OAAO,kBAACC,EAAA,EAAD,iBAAYF,EAAZ,CAAmBC,MAAOA,M,0CCXnC,IA0BME,EAAUC,IAAOC,QAAV,wEAAGD,CAAH,2EA1BA,wcAkCPE,EAAiBF,IAAOG,IAAV,+EAAGH,CAAH,kEAOdI,EAAQJ,IAAOK,GAAV,sEAAGL,CAAH,mBAILM,EAAiBN,IAAOG,IAAV,+EAAGH,CAAH,iCAKdO,E,gLACJC,OAAA,WAAU,IAAD,EAQHC,KAAKb,MANPc,KAC8BC,EAHzB,EAGHC,kBAAqBC,MAHlB,IAIHC,KACEC,aAAuBC,EALtB,EAKeC,MAA+BC,EAL9C,EAKiCC,YAKxC,OACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CACEC,eAAgB,CACdC,KAAM,OAGR,+BAAQN,GACR,0BAAMO,KAAK,cAAcC,QAASN,KAGpC,kBAAC,EAAD,CACED,MAAM,kBACNQ,YACE,8BACE,uBAAGC,KAAK,kCAAR,eADF,MAC8D,IAC5D,uBAAGA,KAAK,2DAAR,WAON,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,eACb,4BAAQA,UAAU,SAEhB,oFAGJ,6BACA,iCACGhB,EAAciB,KACb,WAOEC,GACI,IAAD,IANDC,KAMC,IALCC,YAAed,EAKhB,EALgBA,MAAOpB,EAKvB,EALuBA,MAAOmC,EAK9B,EAL8BA,YAAaC,EAK3C,EAL2CA,KAC1CC,EAID,EAJCA,KAMDrC,GAASA,EAAMsC,QAAUtC,EAAMsC,OAAOC,QAEzC,OACE,sCACKP,GAAS,6BACZ,kBAAC9B,EAAD,CACEsC,SAAUxC,GAASA,EAAMyC,iBAaxBzC,GAASA,EAAMyC,iBACd,kBAAChC,EAAD,KACE,kBAAC,IAAQT,EAAMyC,kBAGnB,kBAACpC,EAAD,KACE,gCACE,kBAACE,EAAD,KAAQa,IAEV,iCACE,6BACEsB,wBAAyB,CAAEC,OAAQN,MAGvC,gCACE,6CAEGF,EAAYJ,KACX,YAAsC,IAAnCL,EAAkC,EAAlCA,KAAMkB,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACnB,OACE,wBAAIC,IAAKrB,GACP,uBAAGG,KAAMgB,GACHnB,EADN,KACesB,YACX,IAAIC,KAAKL,GACT,mBAGDE,GACD,wCAEE,uBAAGjB,KAAMiB,GAAT,0BAUbV,GACC,yCAEGA,EAAKL,KAAI,SAACL,EAAMwB,GAAP,MAAa,CACrBA,EAAI,GAAK,KACT,kBAAC,IAAD,CACEH,IAAKrB,EACLyB,GAAE,QAAUzB,EAAK0B,eAEhB1B,gBAazB,wBAAII,UAAU,gB,GAxIHuB,aAkJVC,GAFE5C,YAEO,c,qqDC7MtB,EAAQ,OAAR,CAA0B,QAAQ,SAAU6C,GAC1C,OAAO,SAAcC,GACnB,OAAOD,EAAW3C,KAAM,IAAK,OAAQ4C","file":"component---src-pages-speaking-jsx-a688d8ac025d95b7ecfc.js","sourcesContent":["import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nimport Banner from './Banner'\n\nexport default props => {\n  const { image } = useStaticQuery(graphql`\n    query {\n      image: file(relativePath: { eq: \"dpip-image.jpg\" }) {\n        childImageSharp {\n          # Specify a fluid image and fragment\n          # The default maxWidth is 800 pixels\n          fluid {\n            ...GatsbyImageSharpFluid\n          }\n        }\n        colors {\n          ...GatsbyImageColors\n        }\n      }\n    }\n  `)\n  return <Banner {...props} image={image} />\n}\n","import React, { Component } from 'react'\nimport Link from 'gatsby-link'\nimport Img from 'gatsby-image'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport { format } from 'date-fns'\nimport styled from 'styled-components'\n\nimport Layout from '../components/Layout'\nimport Banner from '../components/SpeakingBanner'\n\nconst padding = `& {\n    box-sizing: border-box;\n    padding-left: 16px;\n    padding-right: 16px;\n  }\n  @media (min-width: 320px) {\n    & {\n      padding-left: calc(7.14286vw - 6.85714px);\n    }\n  }\n  @media (min-width: 768px) {\n    & {\n      padding-left: 48px;\n    }\n  }\n  @media (min-width: 320px) {\n    & {\n      padding-right: calc(7.14286vw - 6.85714px);\n    }\n  }\n  @media (min-width: 768px) {\n    & {\n      padding-right: 48px;\n    }\n  }`\n\nconst Section = styled.section`\n  ${padding}\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  justify-content: flex-start;\n`\n\nconst SectionContent = styled.div`\n  margin: -0.4em 0 0;\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n`\n\nconst Title = styled.h3`\n  margin-top: 0;\n`\n\nconst ImageContainer = styled.div`\n  width: 25%;\n  margin-right: 2em;\n`\n\nclass Speaking extends Component {\n  render() {\n    const {\n      data: {\n        allMarkdownRemark: { edges: presentations },\n        site: {\n          siteMetadata: { title: siteTitle, description: siteDescription },\n        },\n      },\n    } = this.props\n\n    return (\n      <Layout>\n        <Helmet\n          htmlAttributes={{\n            lang: 'en',\n          }}\n        >\n          <title>{siteTitle}</title>\n          <meta name=\"description\" content={siteDescription} />\n        </Helmet>\n\n        <Banner\n          title=\"Public Speaking\"\n          imageCredit={\n            <span>\n              <a href=\"https://twitter.com/JackHowell\">Jack Howell</a> at{' '}\n              <a href=\"https://twitter.com/DPiPboro/status/1152660388598689793\">\n                DPiP\n              </a>\n            </span>\n          }\n        />\n\n        <div className=\"bodyContainer\">\n          <div className=\"inner\">\n            <div className=\"bodyContent\">\n              <header className=\"major\">\n                {/* <h2>Projects</h2> */}\n                <p>Here's a list of stuff I'm currently talking about.</p>\n              </header>\n            </div>\n            <hr />\n            <section>\n              {presentations.map(\n                (\n                  {\n                    node: {\n                      frontmatter: { title, image, presentedAt, tags },\n                      html,\n                    },\n                  },\n                  index\n                ) => {\n                  const color =\n                    (image && image.colors && image.colors.vibrant) ||\n                    `transparent`\n                  return (\n                    <>\n                      {!!index && <hr />}\n                      <Section\n                        hasImage={image && image.childImageSharp}\n                        // style={{\n                        //   borderColor: `${color}`,\n                        //   borderWidth: `0 .4em`,\n                        //   marginLeft: `-.4em`,\n                        //   marginRight: `-.4em`,\n                        //   borderStyle: `none solid`,\n                        //   marginTop: `-4em`,\n                        //   marginBottom: `-4em`,\n                        //   paddingTop: `4em`,\n                        //   paddingBottom: `4em`,\n                        // }}\n                      >\n                        {image && image.childImageSharp && (\n                          <ImageContainer>\n                            <Img {...image.childImageSharp} />\n                          </ImageContainer>\n                        )}\n                        <SectionContent>\n                          <header>\n                            <Title>{title}</Title>\n                          </header>\n                          <article>\n                            <section\n                              dangerouslySetInnerHTML={{ __html: html }}\n                            ></section>\n                          </article>\n                          <footer>\n                            <ul>\n                              Presented at:&nbsp;\n                              {presentedAt.map(\n                                ({ name, date, link, recording }) => {\n                                  return (\n                                    <li key={name}>\n                                      <a href={link}>\n                                        {`${name}, ${format(\n                                          new Date(date),\n                                          'Do MMMM YYYY'\n                                        )}`}\n                                      </a>\n                                      {!!recording && (\n                                        <>\n                                          &nbsp;\n                                          <a href={recording}>\n                                            [View Recording]\n                                          </a>\n                                        </>\n                                      )}\n                                    </li>\n                                  )\n                                }\n                              )}\n                            </ul>\n                            {tags && (\n                              <p>\n                                Tagged as:&nbsp;\n                                {tags.map((name, i) => [\n                                  i > 0 && ', ',\n                                  <Link\n                                    key={name}\n                                    to={`/tag/${name.toLowerCase()}`}\n                                  >\n                                    {name}\n                                  </Link>,\n                                ])}\n                              </p>\n                            )}\n                          </footer>\n                        </SectionContent>\n                      </Section>\n                    </>\n                  )\n                }\n              )}\n            </section>\n            <hr className=\"endPost\" />\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default Speaking\n\nexport const pageQuery = graphql`\n  query SpeakingQuery {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(\n      filter: { frontmatter: { layout: { eq: \"presentation\" } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          html\n          frontmatter {\n            date(formatString: \"MMMM dd, YYYY\")\n            path\n            title\n            image {\n              childImageSharp {\n                sizes(maxWidth: 630) {\n                  ...GatsbyImageSharpSizes\n                }\n              }\n              colors {\n                ...GatsbyImageColors\n              }\n            }\n            tags\n            presentedAt {\n              name\n              date\n              link\n              recording\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n"],"sourceRoot":""}