{"version":3,"sources":["webpack:///./src/components/Banner.js","webpack:///./src/components/Tiles.js","webpack:///./src/components/Tags.js","webpack:///./src/components/SourcePost.js","webpack:///./src/templates/blog-post.js"],"names":["Banner","_ref","title","date","description","image","react_default","a","createElement","className","styles","header","childImageSharp","imageContainer","gatsby_image_default","sizes","outerWrapperClassName","wrapper","container","style","color","position","format","Date","Tiles","tiles","tileContainer","filter","tile","map","index","key","gatsby_link_default","to","frontmatter","path","blackout","link","PostTags","tags","tagsLabel","tag","slug","replace","toLowerCase","length","propTypes","PropTypes","arrayOf","string","SourcePost","url","root","href","BlogPostTemplate","render","post","this","props","data","markdownRemark","_ref$frontmatter","_ref2$frontmatter","siteTitle","get","_this$props$pathConte","pathContext","next","prev","Helmet_default","name","content","creator","src","components_Banner","dangerouslySetInnerHTML","__html","html","components_SourcePost","Tags","components_Tiles","React","Component","pageQuery"],"mappings":"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","file":"component---src-templates-blog-post-js-02f49ce09c384d3de99f.js","sourcesContent":["import React from 'react'\nimport { withPrefix } from 'gatsby-link'\nimport Img from 'gatsby-image'\nimport { format } from 'date-fns'\n\nimport styles from './banner.module.scss'\n\nconst Banner = ({ title, date, description, image }) => (\n    <header className={styles.header}>\n        {image && image.childImageSharp && (\n            <aside className={styles.imageContainer}>\n                <Img sizes={image.childImageSharp.sizes} outerWrapperClassName={styles.wrapper} className={styles.wrapper} />\n            </aside>\n        )}\n        <div className={styles.container}></div>\n        <div className=\"bodyContent\" style={{\n            color: 'white',\n            position: 'relative'\n        }}>\n            <header>\n                <h1>{title}</h1>\n            </header>\n            {description &&\n                <div>\n                    <h2>{description}</h2>\n                </div>\n            }\n            <aside>\n                Published: {format(new Date(date), 'DD MMM YYYY')}\n            </aside>\n        </div>\n    </header>\n)\n\nexport default Banner\n","import React from 'react'\nimport Link from 'gatsby-link'\nimport Img from 'gatsby-image'\nimport { format } from 'date-fns'\n\nimport styles from './tiles.module.scss'\n\nconst Tiles = ({ tiles }) => {\n    return (\n        <aside className={`bodyContent ${styles.tileContainer}`}>\n            {tiles &&\n                tiles\n                    .filter(tile => !!tile)\n                    .map((tile, index) => {\n                        return (\n                            <section key={index} className={styles.tile}>\n                                <Link to={tile.frontmatter.path}>\n                                    {tile.frontmatter.image && tile.frontmatter.image.childImageSharp && (\n                                        <aside className={styles.imageContainer}>\n                                            <Img sizes={tile.frontmatter.image.childImageSharp.sizes} outerWrapperClassName={styles.wrapper} className={styles.wrapper} />\n                                        </aside>\n                                    )}\n                                    <div className={styles.blackout}></div>\n                                    <h3 className={styles.link}>{tile.frontmatter.title}</h3>\n                                    <p className={styles.description}>{tile.frontmatter.description}</p>\n                                    <p className={styles.date}>{format(new Date(tile.frontmatter.date), 'DD MMM YYYY')}</p>\n                                </Link>\n                            </section>\n                        )\n                    })}\n        </aside>\n    )\n}\n\nexport default Tiles","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Link from 'gatsby-link'\n\nimport styles from './tags.module.scss'\n\nconst PostTags = ({ tags }) => {\n    if (!tags) return <aside />\n    return (\n        <aside>\n            <span className={styles.tagsLabel}>Tagged as:</span>\n            {tags.map((tag, index) => {\n                const slug = tag\n                    .replace(/\\W/gi, '-')\n                    .toLowerCase()\n                return (\n                    <span key={tag} className={styles.tag}>\n                        <Link to={`/tag/${slug}`}>{tag}</Link>\n                        {(index !== tags.length - 1) &&\n                            (\n                                <span>, </span>\n                            )\n                        }\n                    </span>\n                )\n            })}\n        </aside>\n    )\n}\n\nPostTags.propTypes = {\n    tags: PropTypes.arrayOf(PropTypes.string)\n}\n\nexport default PostTags","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styles from './sourcepost.module.scss'\n\nconst SourcePost = ({ url }) => {\n    if (!url) return <aside />\n    return (\n        <aside className={styles.root}>\n            This article was originally published at <a href={url}>{url}</a>\n        </aside>\n    )\n}\n\nSourcePost.propTypes = {\n\n}\n\nexport default SourcePost","import React from 'react'\nimport Helmet from 'react-helmet'\nimport Link from 'gatsby-link'\nimport get from 'lodash/get'\nimport { graphql } from 'gatsby'\n\nimport Banner from '../components/Banner'\nimport Tiles from '../components/Tiles'\nimport Tags from '../components/Tags'\nimport SourcePost from '../components/SourcePost'\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark || {}\n    const { frontmatter: { title, tags, url, image, description } = {} } =\n      post || {}\n    const { frontmatter = {} } = post || {}\n    const siteTitle = get(this.props, 'data.site.siteMetadata.title')\n    const { next, prev } = this.props.pathContext\n\n    return (\n      <div>\n        <Helmet title={`${title} | ${siteTitle}`}>\n          <meta name=\"twitter:card\" content=\"summary_large_image\" />\n          <meta name=\"twitter:site\" content=\"@psyked\" />\n          <meta name=\"twitter:creator\" content={frontmatter.creator} />\n          <meta name=\"twitter:title\" content={title} />\n          <meta name=\"twitter:description\" content={description} />\n          {image && image.childImageSharp && (\n            <meta\n              name=\"twitter:image\"\n              content={image.childImageSharp.sizes.src}\n            />\n          )}\n        </Helmet>\n        <Banner {...frontmatter} />\n        <div className=\"bodyContent\">\n          <div dangerouslySetInnerHTML={{ __html: post.html }} />\n          <hr className=\"endPost\" />\n          <SourcePost url={url} />\n          <Tags tags={tags} />\n        </div>\n        <Tiles tiles={[next, prev]} />\n      </div>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostByPath($path: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      id\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        tags\n        url\n        image {\n          childImageSharp {\n            sizes(maxWidth: 630) {\n              ...GatsbyImageSharpSizes\n            }\n          }\n        }\n        description\n      }\n    }\n  }\n`\n"],"sourceRoot":""}