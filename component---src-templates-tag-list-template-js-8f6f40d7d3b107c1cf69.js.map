{"version":3,"sources":["webpack:///./src/templates/tag-list-template.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","Tags","_ref","pathContext","data","tag","_data$allMarkdownRema","allMarkdownRemark","edges","totalCount","tagHeader","a","createElement","className","to","map","_ref2","_node$frontmatter","node","frontmatter","path","title","key","propTypes","PropTypes","shape","string","isRequired","number","arrayOf"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,GAAAS,EAAAT,EAAAO,EAAAC,GAAAE,EAAAV,EAAA,IAAAW,EAAAX,EAAAO,EAAAG,GAOME,EAAO,SAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,YAAaC,EAAWF,EAAXE,KACnBC,EAAQF,EAARE,IAD8BC,EAERF,EAAKG,kBAA3BC,EAF8BF,EAE9BE,MAAOC,EAFuBH,EAEvBG,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEJ,EAFF,IAIf,OACEV,EAAAgB,EAAAC,cAAA,OAAKC,UAAU,eACblB,EAAAgB,EAAAC,cAACZ,EAAAW,EAAD,CAAMG,GAAG,SAAT,YACAnB,EAAAgB,EAAAC,cAAA,UAAKF,GACLf,EAAAgB,EAAAC,cAAA,UACGJ,EAAMO,IAAI,SAAAC,GAAc,IAAAC,EAAAD,EAAXE,KACiBC,YAArBC,EADeH,EACfG,KAAMC,EADSJ,EACTI,MACd,OACE1B,EAAAgB,EAAAC,cAAA,MAAIU,IAAKF,GACPzB,EAAAgB,EAAAC,cAACZ,EAAAW,EAAD,CAAMG,GAAIM,GAAOC,SAS/BpB,EAAKsB,UAAY,CACfpB,YAAaqB,IAAUC,MAAM,CAC3BpB,IAAKmB,IAAUE,OAAOC,aAExBvB,KAAMoB,IAAUC,MAAM,CACpBlB,kBAAmBiB,IAAUC,MAAM,CACjChB,WAAYe,IAAUI,OAAOD,WAC7BnB,MAAOgB,IAAUK,QACfL,IAAUC,MAAM,CACdP,KAAMM,IAAUC,MAAM,CACpBN,YAAaK,IAAUC,MAAM,CAC3BL,KAAMI,IAAUE,OAAOC,WACvBN,MAAOG,IAAUE,OAAOC,iBAG3BA,iBAMI1B,YAER,IAAMR,EAAS","file":"component---src-templates-tag-list-template-js-8f6f40d7d3b107c1cf69.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\n// Components\nimport Link from 'gatsby-link'\n\nconst Tags = ({ pathContext, data }) => {\n  const { tag } = pathContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? '' : 's'\n  } tagged with \"${tag}\"`\n\n  return (\n    <div className=\"bodyContent\">\n      <Link to=\"/tags\">All tags</Link>\n      <h1>{tagHeader}</h1>\n      <ul>\n        {edges.map(({ node }) => {\n          const { path, title } = node.frontmatter\n          return (\n            <li key={path}>\n              <Link to={path}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nTags.propTypes = {\n  pathContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              path: PropTypes.string.isRequired,\n              title: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            title\n            path\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}